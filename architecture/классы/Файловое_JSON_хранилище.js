import { NodeJS, BigInteger } from '../third-party.js';
import { КОНСТАНТЫ } from '../КОНСТАНТЫ.js';

export class Файловое_JSON_хранилище {

// -----------------------------------------------------------------------------

  constructor(рабочая_папка) {
    this.путь_к_файлу_проекта = NodeJS.path.join(рабочая_папка, 'Данные_органайзера_кода.json');

    // При открытии рабочей папки нужно проверять существует ли файл проекта,
    // если существует то нужно считать его,
    // если не существует, то нужно создать его.

    NodeJS.fs.stat(this.путь_к_файлу_проекта, function (ошибка) {
        if (ошибка === null) { // Файл проекта существует.
          this.загрузить();
        } else if (ошибка.code === 'ENOENT') { // Файл проекта не существует.
          this.сохранить();
        } else {
          console.log('Произошла какая-то ошибка: ', ошибка.code);
        }
    }.bind(this));
  }

// -----------------------------------------------------------------------------

  сохранить() {
    if (!this.проект) {
        this.проект = {
            Теги: {},
            Сниппеты: {}
        };
    }
    let содержимое_файла_проекта = JSON.stringify(this.проект, null, 2);
    NodeJS.fs.writeFileSync(this.путь_к_файлу_проекта, содержимое_файла_проекта);
  }

// -----------------------------------------------------------------------------

  загрузить() {
    let содержимое_файла_проекта = NodeJS.fs.readFileSync(this.путь_к_файлу_проекта).toString();
    this.проект = JSON.parse(содержимое_файла_проекта);
  }

// -----------------------------------------------------------------------------

  создать_тег(имя_нового_тега, идентификатор_родительского_тега) {
    if (!идентификатор_родительского_тега) {
        идентификатор_родительского_тега = -1;
    }

    let новый_тег = {
            Имя: имя_нового_тега,
            Идентификатор_родительского_тега: идентификатор_родительского_тега
        },
        индекс;

    // Перед созданием тега нужно проверять, чтобы не было коллизий.
    this.достать_идентификаторы_всех_тегов().forEach(function (очередной_идентификатор_тега) {
        индекс = КОНСТАНТЫ.СТЕПЕНИ_ДВОЙКИ.indexOf(очередной_идентификатор_тега);
        if (индекс > -1) { КОНСТАНТЫ.СТЕПЕНИ_ДВОЙКИ[индекс] = null; }
    });

    for (индекс = 0; индекс < КОНСТАНТЫ.СТЕПЕНИ_ДВОЙКИ.length; индекс += 1) {
        if (КОНСТАНТЫ.СТЕПЕНИ_ДВОЙКИ[индекс]) {
            новый_тег.Идентификатор = КОНСТАНТЫ.СТЕПЕНИ_ДВОЙКИ[индекс];
            новый_тег.Человеческий_идентификатор = "2^" + индекс;
            break;
        }
    }

    if (!this.проект.hasOwnProperty('Теги')) { this.проект.Теги = {}; }
    this.проект.Теги[новый_тег.Идентификатор] = новый_тег;
    this.сохранить();

    return новый_тег;
  }

// -----------------------------------------------------------------------------

  сформировать_данные_для_дерева_тегов() {
    let идентификатор_тега,
        результирующие_данные = { rows: [] };

    for (идентификатор_тега in this.проект.Теги) {
        if (this.проект.Теги.hasOwnProperty(идентификатор_тега)) {
            if (this.проект.Теги[идентификатор_тега].Идентификатор_родительского_тега === -1) {
                результирующие_данные.rows.push({
                    id: this.проект.Теги[идентификатор_тега].Идентификатор,
                    data: [
                        this.проект.Теги[идентификатор_тега].Человеческий_идентификатор
                      , false
                      , { "value": this.проект.Теги[идентификатор_тега].Имя, "image": "tag_blue.png" }
                    ],
                    rows: []
                });
            }
        }
    }
    return JSON.stringify(результирующие_данные, null, 2);
  }

// -----------------------------------------------------------------------------

  достать_тег_по_идентификатору(идентификатор_тега) {
    return this.проект.Теги[идентификатор_тега];
  }

// -----------------------------------------------------------------------------

  достать_идентификаторы_всех_тегов() {
    let все_идентификаторы = [],
        идентификатор_тега;
    for (идентификатор_тега in this.проект.Теги) {
        if (this.проект.Теги.hasOwnProperty(идентификатор_тега)) {
            все_идентификаторы.push(идентификатор_тега);
        }
    }
    return все_идентификаторы;
  }

// -----------------------------------------------------------------------------

  обновить_имя_тега(идентификатор_тега, новое_имя, старое_имя_для_проверки) {
    if (this.проект.Теги[идентификатор_тега].Имя.localeCompare(старое_имя_для_проверки) === 0) {
      this.проект.Теги[идентификатор_тега].Имя = новое_имя;
      this.сохранить();
    }
  }

  удалить_тег_по_идентификатору(идентификатор_тега) {
    delete this.проект.Теги[идентификатор_тега];
    this.сохранить();
  }

// -----------------------------------------------------------------------------

  создать_сниппет(битовая_маска, тип_данных, расширение_файла) {
    let временная_отметка = + new Date();
    let имя_файла_для_сниппета = временная_отметка + расширение_файла;
    if (!this.проект.Сниппеты) { this.проект.Сниппеты = {}; }
    if (!this.проект.Сниппеты.hasOwnProperty(битовая_маска)) {
      this.проект.Сниппеты[битовая_маска] = {
        Тип_данных: тип_данных,
        Путь_к_сниппету: имя_файла_для_сниппета
      };
      this.сохранить();
    }
  }

// -----------------------------------------------------------------------------

  достать_все_теги_сниппета(битовая_маска_сниппета) {
    let все_теги_сниппета = [],
        маска_сниппета_длинным_числом = BigInteger.bigInt(битовая_маска_сниппета);
    for (let идентификатор_тега in this.проект.Теги) {
        if (this.проект.Теги.hasOwnProperty(идентификатор_тега)) {
            if (маска_сниппета_длинным_числом.and(BigInteger.bigInt(идентификатор_тега)).compare(0) !== 0) {
              все_теги_сниппета.push(this.проект.Теги[идентификатор_тега].Идентификатор);
            }
        }
    }
    return все_теги_сниппета;
  }

// -----------------------------------------------------------------------------

  какой_тип_у_сниппета(битовая_маска) {
    return this.проект.Сниппеты[битовая_маска].Тип_данных;
  }

// -----------------------------------------------------------------------------

  сформировать_данные_для_списка_сниппетов(идентификаторы_выбранных_тегов) {
    let данные_для_списка_сниппетов = [];

    for (let маска_сниппета in this.проект.Сниппеты) {
        if (this.проект.Сниппеты.hasOwnProperty(маска_сниппета)) {
          let число_не_подходящих_тегов_в_сниппете = 0,
              маска_очередного_сниппета_длинным_числом = BigInteger.bigInt(маска_сниппета);

          // Сниппет попадает в список сниппетов для выбранных тегов только тогда,
          // когда множество его тегов является надмножеством множества выбранных тегов.
          идентификаторы_выбранных_тегов.forEach(function (очередной_идентификатор_выбранного_тега) {
            if (маска_очередного_сниппета_длинным_числом.and(BigInteger.bigInt(очередной_идентификатор_выбранного_тега)).compare(0) === 0) {
              число_не_подходящих_тегов_в_сниппете += 1;
            }
          });
          if (число_не_подходящих_тегов_в_сниппете > 0) { continue; }

          данные_для_списка_сниппетов.push({
            id: маска_сниппета,
            tags: this.сформировать_данные_для_элемента_из_списка_сниппетов(маска_сниппета)
          });
        }
    }
    return JSON.stringify(данные_для_списка_сниппетов, null, 2);
  }

// -----------------------------------------------------------------------------

сформировать_данные_для_элемента_из_списка_сниппетов(маска_сниппета) {
  let результирующая_строка = '',
      теги_сниппета = this.достать_все_теги_сниппета(маска_сниппета);

  for (let идентификатор_тега in this.проект.Теги) {
      if (this.проект.Теги.hasOwnProperty(идентификатор_тега)) {
        let тег_в_сниппете = (теги_сниппета.indexOf(идентификатор_тега) > -1);
        результирующая_строка += "<option value='"
           + идентификатор_тега
           + "'"
           + (тег_в_сниппете ? "selected='selected'" : "")
           + ">"
           + this.проект.Теги[идентификатор_тега].Имя
           + '</option>';
      }
  }

  return результирующая_строка;
}

// -----------------------------------------------------------------------------

  проверить_существование_сниппета_по_маске(битовая_маска_тегов) {
    if (this.проект.Сниппеты.hasOwnProperty(битовая_маска_тегов)) {
      return true;
    }
    return false;
  }

// -----------------------------------------------------------------------------

  добавить_тег_к_сниппету() {
    // Do nothing
  }

// -----------------------------------------------------------------------------

}
