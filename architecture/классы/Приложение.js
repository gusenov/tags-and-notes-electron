import { DHTMLX, Electron, NodeJS } from '../third-party.js';

import { КОНСТАНТЫ } from '../КОНСТАНТЫ.js';

import { Файловое_JSON_хранилище } from './Файловое_JSON_хранилище.js';
import { Вкладка_приложения } from './Вкладка_приложения.js';


export class Приложение {

// -----------------------------------------------------------------------------

  constructor() {
    this.основная_разметка = new DHTMLX.LayoutObject(document.body, '1C');

    this.основная_панель_инструментов = this.основная_разметка.attachToolbar();
    this.основная_панель_инструментов.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_ИКОНКАМ_ПРИЛОЖЕНИЯ);

    this.основная_панель_инструментов.loadStruct(КОНСТАНТЫ.ПУТЬ_К_РАЗМЕТКЕ_ИНТЕРФЕЙСА + 'основная_панель_инструментов.xml', function () {});
    // dhtmlx.com/docs/products/visualDesigner/live/preview/data/toolbar.xml

    this.создать_и_настроить_основное_меню();

    this.основная_строка_состояния = this.основная_разметка.attachStatusBar();
    this.основная_строка_состояния.setText('Для начала работы откройте папку.');
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_основное_меню() {
    this.основное_меню = this.основная_разметка.attachMenu();
    this.основное_меню.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_КАРТИНКАМ_ОТ_DHTMLX);

    this.основное_меню.loadStruct(КОНСТАНТЫ.ПУТЬ_К_РАЗМЕТКЕ_ИНТЕРФЕЙСА + 'главное_меню.xml');
    // dhtmlx.com/docs/products/visualDesigner/live/preview/data/menu.xml

    this.основное_меню.attachEvent("onClick", function (идентификатор_пункта_меню) {
      switch (идентификатор_пункта_меню) {
        case "открыть_папку":
          this.открыть_папку();
          break;
        case "выход":
          Electron.remote.getCurrentWindow().close();
          break;

        case "создать_вкладку":
          this.создать_новую_рабочую_вкладку();
          break;
        case "закрыть_активную_вкладку":
          this.закрыть_рабочую_вкладку(this.основная_панель_вкладок.getActiveTab());
          break;
        case "закрыть_неактивные_вкладки":
          this.закрыть_неактивные_вкладки();
          break;

        default:
      }
    }.bind(this));
  }

// -----------------------------------------------------------------------------

  открыть_папку() {
    let результат_открытия_папки = Electron.remote.dialog.showOpenDialog(Electron.remote.getCurrentWindow(), { properties: ['openDirectory'] });

    if (результат_открытия_папки && результат_открытия_папки.length > 0) {
      this.рабочая_папка = NodeJS.path.normalize(результат_открытия_папки[0]);

      this.хранилище = new Файловое_JSON_хранилище(this.рабочая_папка);

      this.основная_строка_состояния.setText("Рабочая папка: " + this.рабочая_папка);

      this.содержимое_вкладок = {};
      this.создать_и_настроить_панель_вкладок();
      this.вкладка_плюс.show();
    }
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_панель_вкладок() {
    this.основная_панель_вкладок = this.основная_разметка.cells('a').attachTabbar();

    this.вкладка_плюс = this.создать_новую_вкладку('вкладка_для_добавления_новых', "+", null, false, false);

    this.вкладка_плюс.disable();
    this.основная_панель_вкладок.tabs('вкладка_для_добавления_новых').hide();

    this.основная_панель_вкладок.attachEvent("onTabClick", function (идентификатор_нажатой_вкладки) {
      if (идентификатор_нажатой_вкладки.localeCompare('вкладка_для_добавления_новых') === 0) {
        this.создать_новую_рабочую_вкладку();
      }
    }.bind(this));

    this.основная_панель_вкладок.attachEvent("onTabClose", function (идентификатор_закрытой_вкладки) {
      this.закрыть_рабочую_вкладку(идентификатор_закрытой_вкладки);
      return true;
    }.bind(this));
  }

// -----------------------------------------------------------------------------

  создать_новую_вкладку(идентификатор, имя, позиция, перейти_на_неё_сейчас, можно_ли_закрывать_её) {
    this.основная_панель_вкладок.addTab(идентификатор, имя, null, позиция, перейти_на_неё_сейчас, можно_ли_закрывать_её);
    return this.основная_панель_вкладок.cells(идентификатор);
  }

// -----------------------------------------------------------------------------

  создать_новую_рабочую_вкладку() {
    let количество_всех_вкладок = this.основная_панель_вкладок.getAllTabs().length,
        номер_новой_вкладки = количество_всех_вкладок,
        идентификатор_новой_вкладки = 'вкладка_' + номер_новой_вкладки,
        новая_вкладка = this.создать_новую_вкладку(идентификатор_новой_вкладки, "Новая вкладка", количество_всех_вкладок - 1, true, true);
    this.содержимое_вкладок[идентификатор_новой_вкладки] = new Вкладка_приложения(новая_вкладка, this.хранилище);
  }

// -----------------------------------------------------------------------------

  закрыть_рабочую_вкладку(идентификатор_закрываемой_вкладки) {
    this.основная_панель_вкладок.cells(идентификатор_закрываемой_вкладки).close(false);
    this.основная_панель_вкладок.forEachTab(function (очередная_вкладка) {
      if (this.основная_панель_вкладок.tabs(идентификатор_закрываемой_вкладки).getIndex() - очередная_вкладка.getIndex() === 1) {
        очередная_вкладка.setActive();
      }
    }.bind(this));
  }

// -----------------------------------------------------------------------------

  закрыть_неактивные_вкладки() {
    let активная_вкладка = this.основная_панель_вкладок.getActiveTab();
    this.основная_панель_вкладок.forEachTab(function (очередная_вкладка) {
        let идентификатор = очередная_вкладка.getId();
        if (идентификатор.localeCompare('вкладка_для_добавления_новых') !== 0 && идентификатор.localeCompare(активная_вкладка) !== 0) {
            очередная_вкладка.close(false);
        }
    }.bind(this));
  }

// -----------------------------------------------------------------------------

}
