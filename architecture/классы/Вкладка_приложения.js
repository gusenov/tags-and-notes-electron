import { DHTMLX, AceEditor, BigInteger } from '../third-party.js';
import { КОНСТАНТЫ } from '../КОНСТАНТЫ.js';

export class Вкладка_приложения {

// -----------------------------------------------------------------------------

  constructor(новая_вкладка, хранилище_приложения) {
    this.рабочая_вкладка = новая_вкладка;

    this.хранилище = хранилище_приложения;

    this.разметка_вкладки = новая_вкладка.attachLayout('3L');
    this.создать_и_настроить_разметку_для_тегов();

    this.класс_на_просмотр_сниппетов = новая_вкладка.getId() + "-теги_сниппетов_просмотр";
    this.класс_на_редактирование_сниппетов = новая_вкладка.getId() + "-теги_сниппетов_редактирование";
    this.создать_и_настроить_разметку_для_списка_сниппетов();

    this.идентификатор_редактора_кода = новая_вкладка.getId() + '-редактор_кода';
    this.создать_и_настроить_разметку_для_редактора_кода()
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_разметку_для_тегов() {
    this.место_для_тегов = this.разметка_вкладки.cells('a');
    this.место_для_тегов.setText('Теги');
    this.создать_и_настроить_панель_инструментов_для_тегов();
    this.строка_состояния_для_тегов = this.место_для_тегов.attachStatusBar();
    this.строка_состояния_для_тегов.setText('');
    this.создать_и_настроить_дерево_для_тегов();
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_панель_инструментов_для_тегов() {
    this.панель_инструментов_для_тегов = this.место_для_тегов.attachToolbar();
    this.панель_инструментов_для_тегов.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_ИКОНКАМ_ПРИЛОЖЕНИЯ);
    this.панель_инструментов_для_тегов.loadStruct(КОНСТАНТЫ.ПУТЬ_К_РАЗМЕТКЕ_ИНТЕРФЕЙСА + 'панель_инструментов_для_тегов.xml', function () {});
    this.панель_инструментов_для_тегов.attachEvent("onClick", function (идентификатор_нажатого_инструмента) {
      switch (идентификатор_нажатого_инструмента) {
        case "добавить_тег":
          this.добавить_тег();
          break;
        case "удалить_тег":
          this.удалить_тег();
          break;
        case "снять_выделение":
          this.снять_выделение_с_тега();
          break;
        default:
      }
    }.bind(this));
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_дерево_для_тегов() {
    this.дерево_тегов = this.место_для_тегов.attachGrid();
    this.дерево_тегов.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_ИКОНКАМ_ПРИЛОЖЕНИЯ);
    this.дерево_тегов.setImagePath(КОНСТАНТЫ.ПУТЬ_К_КАРТИНКАМ_ОТ_DHTMLX);
    this.дерево_тегов.setHeader("Маска,Выбор,Тег");
    this.дерево_тегов.setColumnIds("маска,выбор,тег");
    this.дерево_тегов.setColTypes("ro,ch,tree");
    this.дерево_тегов.setInitWidths("64,64,*");
    this.индекс_столбца_для_имени_тегов = 2; // zero-based
    // this.дерево_тегов.enableAutoWidth(true);
    this.дерево_тегов.enableDragAndDrop(true);
    this.дерево_тегов.setDragBehavior("complex");
    this.дерево_тегов.init();

    this.загрузить_данные_в_дерево_тегов();

    this.дерево_тегов.attachEvent("onEmptyClick", function (ev) {
      this.снять_выделение_с_тега();
    }.bind(this));
    this.дерево_тегов.attachEvent("onDataReady", function () {});

    if (!this.выбранные_теги) { this.выбранные_теги = []; }
    this.дерево_тегов.attachEvent("onCheck", this.обработчик_выбора_тега.bind(this));

    this.дерево_тегов.attachEvent("onEditCell",
      function (состояние_редактирования, идентификатор_строки, индекс_ячейки, новое_значение, старое_значение) {
        switch (состояние_редактирования) {
          case 0: // before start; can be canceled if return false
            break;
          case 1: // the editor is opened
            break;
          case 2: // the editor is closed
            if (индекс_ячейки === this.индекс_столбца_для_имени_тегов) {
              this.хранилище.обновить_имя_тега(идентификатор_строки, новое_значение, старое_значение);
            }
            break;
          default:
        }
        return true;
      }.bind(this)
    );
  }

// -----------------------------------------------------------------------------

обработчик_выбора_тега(идентификатор_тега, индекс_ячейки, состояние_выбора) {
  if (состояние_выбора) {
    this.выбранные_теги.push(идентификатор_тега);
  } else {
    let индекс_тега_в_списке_выбранных = this.выбранные_теги.indexOf(идентификатор_тега);
    this.выбранные_теги.splice(индекс_тега_в_списке_выбранных, 1);
  }

  this.рабочая_вкладка.setText(this.выбранные_теги.join(', '));

  this.рассчитать_маску_выбранных_тегов();
  this.отключить_если_нужно_создание_нового_сниппета();
  this.загрузить_данные_в_список_сниппетов();
}

// -----------------------------------------------------------------------------

  рассчитать_маску_выбранных_тегов() {
    let результирующая_маска = BigInteger.bigInt(0);
    this.выбранные_теги.forEach(function (идентификатор_очередного_тега) {
      let числовой_идентификатор_очередного_тега = BigInteger.bigInt(идентификатор_очередного_тега);
      результирующая_маска = результирующая_маска.plus(числовой_идентификатор_очередного_тега);
    }.bind(this));
    this.битовая_маска_выбранных_тегов = результирующая_маска;
  }

// -----------------------------------------------------------------------------

  отключить_если_нужно_создание_нового_сниппета() {
    // Если для текущего набора выбранных тегов уже существует сниппет,
    // то нельзя создавать еще один, иначе он затрет предыдущий.
    if (this.хранилище.проверить_существование_сниппета_по_маске(this.битовая_маска_выбранных_тегов)) {
      this.панель_инструментов_для_списка_сниппетов.disableItem('новый_сниппет');
    } else {
      this.панель_инструментов_для_списка_сниппетов.enableItem('новый_сниппет');
    }
  }

// -----------------------------------------------------------------------------

  загрузить_данные_в_список_сниппетов() {
    this.список_сниппетов.stopEdit();
    this.список_сниппетов.clearAll();
    let данные_для_списка_сниппетов = '[]';
    if (this.выбранные_теги.length > 0) {
      данные_для_списка_сниппетов = this.хранилище.сформировать_данные_для_списка_сниппетов(this.выбранные_теги);
    }
    this.список_сниппетов.parse(данные_для_списка_сниппетов, "json");
  }

// -----------------------------------------------------------------------------

  загрузить_данные_в_дерево_тегов() {
    let данные_для_дерева_тегов = this.хранилище.сформировать_данные_для_дерева_тегов();
    this.дерево_тегов.parse(данные_для_дерева_тегов, "json");
  }

// -----------------------------------------------------------------------------

  добавить_тег() {
    let идентификатор_выделенного_тега = this.дерево_тегов.getSelectedRowId(),
        новый_тег;
    новый_тег = this.хранилище.создать_тег("Новый тег", идентификатор_выделенного_тега);

    this.дерево_тегов.addRow(
        новый_тег.Идентификатор
      , [новый_тег.Человеческий_идентификатор, false, новый_тег.Имя, 0]
      , 0
      , идентификатор_выделенного_тега
      , "tag_blue.png"
      , false
    );

    this.дерево_тегов.expandAll();

    // Выделить новый тег.
    // this.дерево_тегов.selectRowById(новый_тег.идентификатор,
    //      false, // preserve previously selected (optional, false by default). Multi select mode should be enabled.
    //      true, // scroll row to view (optional, true by default)
    //      true); // if true - call the onRowSelect function (optional, false by default)
  }

// -----------------------------------------------------------------------------

  удалить_тег() {
    let идентификатор_выделенного_тега = this.дерево_тегов.getSelectedRowId();
    this.хранилище.удалить_тег_по_идентификатору(идентификатор_выделенного_тега);
    this.дерево_тегов.deleteRow(идентификатор_выделенного_тега);
    // this.дерево_тегов.deleteSelectedRows();
  }

// -----------------------------------------------------------------------------

  снять_выделение_с_тега() {
    this.дерево_тегов.clearSelection();
  }

// -----------------------------------------------------------------------------

  static определить_подсветку(тип_данных) {
    let соответствия = {
      'application/javascript': "ace/mode/javascript",
      'text/php': "ace/mode/php",
      'text/css': "ace/mode/css",
      'text/html': "ace/mode/html",
      'application/sql': "ace/mode/sql",
      'text/plain': 'ace/mode/text',

      'application/x-sh': 'ace/mode/text'
    };

    return соответствия[тип_данных];
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_разметку_для_списка_сниппетов() {
    this.место_для_списка_сниппетов = this.разметка_вкладки.cells('b');
    this.место_для_списка_сниппетов.setText('Список сниппетов');

    this.панель_инструментов_для_списка_сниппетов = this.место_для_списка_сниппетов.attachToolbar();
    this.панель_инструментов_для_списка_сниппетов.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_КАРТИНКАМ_ОТ_DHTMLX);
    this.панель_инструментов_для_списка_сниппетов.loadStruct(КОНСТАНТЫ.ПУТЬ_К_РАЗМЕТКЕ_ИНТЕРФЕЙСА + 'панель_инструментов_для_списка_сниппетов.xml', function () {});
    this.панель_инструментов_для_списка_сниппетов.attachEvent("onClick", function (идентификатор_нажатого_инструмента) {
      switch (идентификатор_нажатого_инструмента) {
        case 'текстовый_файл':
        case 'js_код':
        case 'скрипт_языка_php':
        case 'таблица_каскадных_стилей':
        case 'sql_файл':
        case 'html_файл':
        case 'bash_скрипт':
          let тип_данных = this.панель_инструментов_для_списка_сниппетов.getListOptionUserData('новый_сниппет', идентификатор_нажатого_инструмента, 'тип_данных');
          let расширение_файла = this.панель_инструментов_для_списка_сниппетов.getListOptionUserData('новый_сниппет', идентификатор_нажатого_инструмента, 'расширение_файла');
          this.хранилище.создать_сниппет(this.битовая_маска_выбранных_тегов, тип_данных, расширение_файла);
          break;
        default:
      }
    }.bind(this));

    this.строка_состояния_для_списка_сниппетов = this.место_для_списка_сниппетов.attachStatusBar();
    this.строка_состояния_для_списка_сниппетов.setText('');

    this.список_сниппетов = this.место_для_списка_сниппетов.attachList({
        type: {
            template: "<select class='теги_сниппета " + this.класс_на_просмотр_сниппетов + "' multiple='multiple'>#tags#</select>",
            template_edit: "<select class='теги_сниппета " + this.класс_на_редактирование_сниппетов + "' multiple='multiple'>#tags#</select>",
            height: "auto"
        }
    });

    this.список_сниппетов.attachEvent("onItemClick", function (идентификатор_элемента, ev, html) {
      // Выбираем подсветку для редактора кода.
      // Доступные подсветки: https://github.com/ajaxorg/ace/tree/master/lib/ace/mode
      let тип = this.хранилище.какой_тип_у_сниппета(идентификатор_элемента);
      this.редактор_кода.getSession().setMode(Вкладка_приложения.определить_подсветку(тип));
      return true;
    }.bind(this));

    this.список_сниппетов.attachEvent("onItemDblClick", function (идентификатор_элемента, ev, html) {
      if (!this.список_сниппетов.isEdit()) {
        // Переключаемся в режим редактора кода.
        this.список_сниппетов.edit(идентификатор_элемента);
        this.оформить_теги_сниппетов("." + this.класс_на_редактирование_сниппетов, false);
      }
      return true;
    }.bind(this));

    this.список_сниппетов.attachEvent("onAfterRender", function () {
      this.оформить_теги_сниппетов("." + this.класс_на_просмотр_сниппетов, true);
    }.bind(this));

  }

// -----------------------------------------------------------------------------

  оформить_теги_сниппетов(класс, невозможность_редактирования) {
    jQuery(класс).select2({
      tags: true,
      disabled: невозможность_редактирования
    });
  }

// -----------------------------------------------------------------------------

  создать_и_настроить_разметку_для_редактора_кода() {
    this.место_для_редактора_кода = this.разметка_вкладки.cells('c');
    this.место_для_редактора_кода.setText('Редактор сниппета');

    this.панель_инструментов_для_редактора_кода = this.место_для_редактора_кода.attachToolbar();
    this.панель_инструментов_для_редактора_кода.setIconsPath(КОНСТАНТЫ.ПУТЬ_К_КАРТИНКАМ_ОТ_DHTMLX);
    this.панель_инструментов_для_редактора_кода.loadStruct(КОНСТАНТЫ.ПУТЬ_К_РАЗМЕТКЕ_ИНТЕРФЕЙСА + 'панель_инструментов_для_редактора_кода.xml', function () {});

    this.строка_состояния_для_редактора_кода = this.место_для_редактора_кода.attachStatusBar();
    this.строка_состояния_для_редактора_кода.setText('');

    this.место_для_редактора_кода.attachHTMLString('<div id="' + this.идентификатор_редактора_кода + '" class="редактора_кода"></div>');
    this.редактор_кода = AceEditor.ace.edit(this.идентификатор_редактора_кода);
    this.редактор_кода.setTheme("ace/theme/monokai");
  }

// -----------------------------------------------------------------------------

}
